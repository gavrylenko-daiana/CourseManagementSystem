@using BLL.Interfaces;
@using Core.Helpers;
@inject IUserService _userService;
@using Core.Enums
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using X.PagedList
@using X.PagedList.Mvc.Core
@using X.PagedList.Web.Common
@model X.PagedList.IPagedList<Notification>

<!DOCTYPE html>
<html>
<head>
    <title>User notifications</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.css">
    <link href="https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css" rel="stylesheet">
    <link href="~/Content/PagedList.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div class="ui container">
    <div class="mt-5" style="display: flex; align-items: center;">
        <div class="ui centered aligned grid" style="margin-left: 2px;">
            <div class="sixteen wide column mt-3 mb-1 centered aligned grid">
                <h5 class="text-uppercase">Your notifications</h5>
            </div>
        </div>

        <div class="ui compact menu ms-auto" style="margin-right: 10px;">
            <div class="ui simple dropdown item">
                Sort by
                <i class="dropdown icon"></i>
                <div class="menu">
                    <div class="item">
                        <a href="@Url.Action("ViewAll", "Notification", new { filteringParam = NotificationsFilteringParams.Course })"><i class="fa" aria-hidden="true"></i>Course</a>
                    </div>
                    <div class="item">
                        <a href="@Url.Action("ViewAll", "Notification", new { filteringParam = NotificationsFilteringParams.Group })"><i class="fa" aria-hidden="true"></i>Group</a>
                    </div>
                    <div class="item">
                        <a href="@Url.Action("ViewAll", "Notification", new { filteringParam = NotificationsFilteringParams.Assignment })"><i class="fa" aria-hidden="true"></i>Assignment</a>
                    </div>
                </div>
            </div>
        </div>

        <div>
            @{
                var currentUserResult = await _userService.GetCurrentUser(User);

                switch (ViewBag.CurrentFilterParam)
                {
                    case NotificationsFilteringParams.Course:
                        @await Html.PartialAsync("~/Views/Notification/CoursesList.cshtml",
                                   currentUserResult.Data.UserCourses.Select(ua => ua.Course).OrderBy(a => a.Name).ToList())
                        ;
                        break;

                    case NotificationsFilteringParams.Group:
                        @await Html.PartialAsync("~/Views/Notification/GroupsList.cshtml",
                                   currentUserResult.Data.UserGroups.Select(ua => ua.Group).OrderBy(a => a.Name).ToList())
                        ;
                        break;

                    case NotificationsFilteringParams.Assignment:
                        @await Html.PartialAsync("~/Views/Notification/AssignmentsList.cshtml",
                                   currentUserResult.Data.UserAssignments.Select(ua => ua.Assignment).OrderBy(a => a.Name).ToList())
                        ;
                        break;
                }
            }
        </div>
    </div>


    @if (TempData["Error"] != null)
    {
        <div class="col-md-12 alert alert-danger">
            <span><b>Sorry!</b> - @TempData["Error"]</span>
        </div>
    }

    <div class="card-body mt-2">
        <table class="table table-striped">
            <thead style="background-color: #1b6054; color: #fff;">
            <tr>
                <th>Notification</th>
                <th>Date</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var notification in Model)
            {
                <tr>
                    <td>
                        @if (!notification.IsRead)
                        {
                            <a href="@Url.Action("NotificationDetails", "Notification", new { notification.Id })" class="notification-link unread text-decoration-underline">@notification.Name</a>
                        }
                        else
                        {
                            <a href="@Url.Action("NotificationDetails", "Notification", new { notification.Id })" class="notification-link text-black">@notification.Name</a>
                        }
                    </td>
                    <td>@notification.Created.ToString("g")</td>
                </tr>
            }
            </tbody>
        </table>
    </div>

    <br/>
    <div class="ui container add-course-button" style="display: flex; justify-content: center; align-items: center;">
        @if (Model.PageCount > 1)
        {
            <div class="pagination-container">
                <div style="text-align:center; align-self:center">
                Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
                </div>
                <div>
                    @Html.PagedListPager((IPagedList)Model, page => Url.Action("ViewAll", new { page = page, filteringParam = ViewBag.CurrentFilterParam, entityId = ViewBag.CurrentEntityId }),
                        new PagedListRenderOptions
                        {
                            LiElementClasses = new string[] { "page-item" },
                            PageClasses = new string[] { "page-link" },
                            MaximumPageNumbersToDisplay = 3
                        })
                </div>
            </div>
        }
    </div>
</div>
</body>
</html>